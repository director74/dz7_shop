version: '3.8'

services:
  order-service:
    build:
      context: ..
      dockerfile: ./build/Dockerfile
      args:
        SERVICE_NAME: order-service
    container_name: order-service
    ports:
      - "8080:8080"
    environment:
      - HTTP_PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orders
      - POSTGRES_SSLMODE=disable
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - BILLING_SERVICE_URL=http://billing-service:8081
      - NOTIFICATION_SERVICE_URL=http://notification-service:8082
      - JWT_SIGNING_KEY=shared_microservices_secret_key
      - JWT_TOKEN_ISSUER=microservices-auth
      - JWT_TOKEN_AUDIENCES=microservices
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      billing-service:
        condition: service_started
      notification-service:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  billing-service:
    build:
      context: ..
      dockerfile: ./build/Dockerfile
      args:
        SERVICE_NAME: billing-service
    container_name: billing-service
    ports:
      - "8081:8081"
    environment:
      - HTTP_PORT=8081
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=billing
      - POSTGRES_SSLMODE=disable
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - JWT_SIGNING_KEY=shared_microservices_secret_key
      - JWT_TOKEN_ISSUER=microservices-auth
      - JWT_TOKEN_AUDIENCES=microservices
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network

  notification-service:
    build:
      context: ..
      dockerfile: ./build/Dockerfile
      args:
        SERVICE_NAME: notification-service
    container_name: notification-service
    ports:
      - "8082:8082"
    environment:
      - HTTP_PORT=8082
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notifications
      - POSTGRES_SSLMODE=disable
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - FROM_EMAIL=notification@example.com
      - JWT_SIGNING_KEY=shared_microservices_secret_key
      - JWT_TOKEN_ISSUER=microservices-auth
      - JWT_TOKEN_AUDIENCES=microservices
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_started
    restart: on-failure
    networks:
      - app-network

  postgres:
    image: postgres:17.2-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=orders,billing,notifications
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../build/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - ../migrations/order_service:/migrations/order_service
      - ../migrations/billing_service:/migrations/billing_service
      - ../migrations/notification_service:/migrations/notification_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.12.10-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: